"""recipe_association table

Revision ID: 15e459c49928
Revises: a64b7fdfe6d8
Create Date: 2024-02-14 09:40:00.181085

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "15e459c49928"
down_revision = "a64b7fdfe6d8"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("recipe_associations", schema=None) as batch_op:
        batch_op.add_column(sa.Column("id", sa.Integer(), nullable=False))
        batch_op.alter_column("recipe_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.alter_column(
            "ingredient_id", existing_type=sa.INTEGER(), nullable=True
        )

    connection = op.get_bind()
    connection.execute("UPDATE recipe_associations SET id = rowid")

    # Modify the migration script to add the 'id' column back with correct constraints
    with op.batch_alter_table("recipe_associations", schema=None) as batch_op:
        batch_op.add_column(sa.Column("id", sa.Integer(), nullable=False))
        batch_op.create_primary_key("pk_recipe_associations_id", ["id"])
        batch_op.create_unique_constraint("uq_recipe_associations_id", ["id"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("recipe_associations", schema=None) as batch_op:
        batch_op.alter_column(
            "ingredient_id", existing_type=sa.INTEGER(), nullable=False
        )
        batch_op.alter_column("recipe_id", existing_type=sa.INTEGER(), nullable=False)
        batch_op.drop_column("id")

    # ### end Alembic commands ###
